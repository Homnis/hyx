'''
author: 大牧 牟文斌
version: V1.0.0
time: 2018/10/16 11:34
desc: TODO
'''
'''
对象的拷贝
1. 引用赋值
2. 浅拷贝
3. 深拷贝
'''
# 1. 引用赋值
# 将一个对象的内存地址，复制之后赋值给另一个变量的过程
# 拷贝的对象的内存地址->多个变量指向同一个对象
# a = ['hello', 'memory']
# b = a
# print(a, b)# a b 两个变量，指向同一个内存地址

# 2. 对象的浅拷贝
'''
程序中，复制并创建了一个新的对象
    对象中的数据，只是复制了数据的内存地址

这样的拷贝模式下，只是拷贝了一个对象的外壳，不同的对象中的数据~指向相同的数据
'''
# a = ['hello', [10, 20, 30]]

# import copy# 拷贝模块 ：copy()函数用于复制一个对象
# b = copy.copy(a) # 1535807476488
#
# print(id(a))
# print(id(b)) # 1536090906312
#
# print(id(a[0])) # 第一个元素地址 2177706583296
# print(id(b[0])) # 第一个元素地址 2177706583296
# print(id(a[1])) # 第一个元素地址 2177706119880
# print(id(b[1])) # 第一个元素地址 2177706119880
#
# a[1].append('world')
#
# print(b)

# 3. 深拷贝
import copy

a = ['hello', [10, 20, 30]]

# 深拷贝：完整对象的复制
b = copy.deepcopy(a)

# 不同的对象
print(id(a))# 1454262539016
print(id(b)) # 1454517657352

# 相同的~指向的同一个常量
print(id(a[0])) # 1454263002312
print(id(b[0])) # 1454263002312

# 不同的~指向的拷贝以后不同的对象
print(id(a[1])) # 1454262538952
print(id(b[1])) # 1454263817288


# 对象的操作不会影响拷贝的数据
a[1].append("world")
print(a)
print(b)