1，内存分析以及处理

    程序的运行肯定离不开对内存的操作 ，所以对内存有个浅显
的认识，然而一个软件要运行，需要的并不是存储内存空间多么巨大
则是运行内存，然后通过cpu进行内存数据的读写，完成数据的运算

1.1程序内存浅析 

    软件程序在计算机中的执行，主要是通过数据单元，控制单元，执行单元
共同协作，完成数据的交互，达到程序处理数据的目的，在软件执行的过程中
由于系统内存和cpu的资源非常有限，所以有效分解软件的各项数据，将不同的数据
加载到不同的内存部分以有效的运行程序，同时达到一个计算机及中有效运行更多软件的目的

在 python 语言中 内存给运行程序的主要有四个地方

栈 （stack） 用于直接分配数据 存取速度较快，数据村属不稳定，适用于
小数据块的快速存取，一般在程序中用于存储变量数据
堆（heap）存储数据稳定持久，一般用于存储加载比较重量的数据
如程序运作过程的对象
静态区/常量区（static）主要用于加载存储程序的一些静态数据，常量数据等等
在 python中的不可变类型的苏剧，也会存储在静态常量区内存中
方法区/数据区（）主要用于加载程序中使用的代码数据，二进制数据，方法数据
等等程序运行需要的预加载数据

#  python内存中的三个存放区域 栈内存 堆内存  静态区

# 首先保证是在不交互的情况下  若是在交互情况下 除了-5到256  其他几乎所有值在静态区的id都会反复存储

 # 但是对象的三种复制 变量传递 浅复制 深复制 也有一定的区别  在不交互的情况下
import copy
import memory_profiler


@memory_profiler.profile()
def main():


    class person(): # 可以定义一个对象
        def __init__(self,name,age,height=0,weight=0):
            self.name=name
            self.age=age
            self.hw=[height,weight]



    a1=person("tom",10,1.5,50)

    a2 = a1

    print(a2 == a1)  # 此处结果应该是True  a1和a2都指向了同一个对象的地址  判断对象的方法是通过__hash__()哈希值和__eq__()等同的意思

    # 由此看来变量的传递，并没有改变对象地址或者复制对象 因此传递都是指向同一个对象 is 和 == 都是判断是否同一个对象


    # 那么可以来看看浅复制是什么样子

    a3=copy.copy(a1)

    print(a3==a1)  # 在此处判断为False  也就是说并没有指向同一个对象 也就是说复制了a1中的信息

    print(a3.hw == a1.hw) # 此处判断为False在此处发现 a3和a1 中的列表对象是一样的id 那么我们可以做一个验证  再确认一下是否是同一个堆地址

    a3.hw.append(100)

    print(a1.hw)   # 然后你可以惊奇的发现在其中的列表对象果然是一块改变的 但是因为= 传递的是新值地址如果 self.hw=这种方式果断改变了 因为相当于不是对原来的地址对象进行操作 这种验证不可取的


    a4=copy.deepcopy(a1)

    print(a4 == a1)  # 此处判断为False   这样并不能判断 和copy有什么区别

    print( a4.hw == a1) # 这里的判断也是False  这就很有意思  难道两个值还不一样吗

    print(a4.hw)
    print(a1.hw)       # 难道列表之间还有不同 列表对象之间确实可以不同

    a1.hw.append(1)

    print(a4.hw)
    print(a1.hw)       # 发现a1的hw值改变了但是a4并没有改变 所以深复制也就是说从头到尾完全复制一个出来 其中包括内置对象 也许值指的id是一样 但类型区别已经显示出来了


main()


以上为案例代码：
 10  13.89844 MiB  13.89844 MiB   @memory_profiler.profile(precision=5)
    11                             def main():
    12                             
    13                             
    14  13.89844 MiB   0.00000 MiB       class person(): # 可以定义一个对象
    15  13.89844 MiB   0.00000 MiB           def __init__(self,name,age,height=0,weight=0):
    16  13.89844 MiB   0.00000 MiB               self.name=name
    17  13.89844 MiB   0.00000 MiB               self.age=age
    18  13.89844 MiB   0.00000 MiB               self.hw=[height,weight]
    19                             
    20                             
    21                             
    22  13.89844 MiB   0.00000 MiB       a1=person("tom",10,1.5,50)
    23                             
    24  13.89844 MiB   0.00000 MiB       a2 = a1
    25                             
    26  13.89844 MiB   0.00000 MiB       print(a2 == a1)  # 此处结果应该是True  a1和a2都指向了同一个对象的地址  判断对象的方法是通过__hash__()哈希值和__eq__()等同的意思
    27                             
    28                                 # 由此看来变量的传递，并没有改变对象地址或者复制对象 因此传递都是指向同一个对象 is 和 == 都是判断是否同一个对象
    29                             
    30                             
    31                                 # 那么可以来看看浅复制是什么样子
    32                             
    33  13.89844 MiB   0.00000 MiB       a3=copy.copy(a1)
    34                             
    35  13.89844 MiB   0.00000 MiB       print(a3==a1)  # 在此处判断为False  也就是说并没有指向同一个对象 也就是说复制了a1中的信息
    36                             
    37  13.89844 MiB   0.00000 MiB       print(a3.hw == a1.hw) # 此处判断为False在此处发现 a3和a1 中的列表对象是一样的id 那么我们可以做一个验证  再确认一下是否是同一个堆地址
    38                             
    39  13.89844 MiB   0.00000 MiB       a3.hw.append(100)
    40                             
    41  13.90234 MiB   0.00391 MiB       print(a1.hw)   # 然后你可以惊奇的发现在其中的列表对象果然是一块改变的 但是因为= 传递的是新值地址如果 self.hw=这种方式果断改变了 因为相当于不是对原来的地址对象进行操作 这种验证不可取的
    42                             
    43                             
    44  13.90234 MiB   0.00000 MiB       a4=copy.deepcopy(a1)
    45                             
    46  13.90234 MiB   0.00000 MiB       print(a4 == a1)  # 此处判断为False   这样并不能判断 和copy有什么区别
    47                             
    48  13.90234 MiB   0.00000 MiB       print( a4.hw == a1) # 这里的判断也是False  这就很有意思  难道两个值还不一样吗
    49                             
    50  13.90234 MiB   0.00000 MiB       print(a4.hw)
    51  13.90234 MiB   0.00000 MiB       print(a1.hw)       # 难道列表之间还有不同 列表对象之间确实可以不同
    52                             
    53  13.90234 MiB   0.00000 MiB       a1.hw.append(1)
    54                             
    55  13.90234 MiB   0.00000 MiB       print(a4.hw)
    56  13.90234 MiB   0.00000 MiB       print(a1.hw)       # 发现a1的hw值改变了但是a4并没有改变 所以深复制也就是说从头到尾完全复制一个出来 其中包括内置对象 也许值指的id是一样 但类型区别已经显示出来了
-------------------------------------
            引用赋值           浅拷贝            深拷贝
对象数量    1                   1                    1
内存消耗    0.01k            0.03k              0.05k       


Docker #  扩展内容  一种发布工具   主要影响目标 linux
'''

总结 ：数据结构存储中 尤为在静态区所占的内存较大 至于为什么可以自己体会 主要由于是静态区数据很稳定 但是其中什么原理并不算太明白


检测过程中有两种模块可以用于检测程序中的占用内存
memory_profiler  guppy 用法
1. memory_profiler 的使用
   pip install -U memory_profiler
 import memory_profiler
@profile

def my_func():

    a = [1] * (10 ** 6)

    b = [2] * (2 * 10 ** 7)

    del b

    return a

 

if __name__ == '__main__':

    my_func()
#修饰想要查看的函数名字
直接在结果栏里输出结果

对于guppy则是大同小异 

pip insatll guppy 

然后
from guppy import hpy

hxx=hpy（）
heap=hxx.heap()
byrcs = hxx.heap().byrcs;
print(heap)

输出结果：

Index  Count   %     Size   % Cumulative  % Kind (class / dict of class)

     0  10124  22 81944416  95  81944416  95 list

     1  16056  34  1325464   2  83269880  96 str

     2   9147  20   745616   1  84015496  97 tuple

     3    102   0   366480   0  84381976  98 dict of module

     4    287   1   313448   0  84695424  98 dict of type

     5   2426   5   310528   0  85005952  98 types.CodeType

     6   2364   5   283680   0  85289632  99 function

     7    287   1   256960   0  85546592  99 type

     8    169   0   192088   0  85738680  99 dict (no owner)

     9    123   0   142728   0  85881408  99 dict of class

byrcs[0].byid 

pip install matplotlib
mprof run memory_profiler_test.py       : 分析结果会保存到一个 .dat格式文件中
　　mprof plot                                              : 把结果以图片到方式显示出来（直接在本目录下运行此命令即可，程序会自动找出.dat文件） （要安装  pip install matplotlib）
       mprof clean                                           : 清空所有 .dat文件

中间过程比较重要

因此需要大量时间来记（就两个 matplotlib mprof）关键记住就OK


1 垃圾回收机制 
garbage collection ：gc

是所有高级语言的标准配置
其中有三种算法比较重要

1 引入计数法
   需要注意的是引入计数法无法判断循环引入情况
    比如两个垃圾数据相互引用，因此局限于此
    优点在于效率高 速度快 在对象建立的时候
    计数就已经存在了 不过因此消耗内存比较大
 
2  标记清除 类与类之间的相互继承源于它们都继承了object
    因此可以作为连接来清除标记 如果其中没有了引用则可以删除
   优点在于比较精确 缺点在于运行过程太过于漫长消耗资源和
  可变对象的数量有关系 ，但是会添加很多不必要的运算


3 隔代回收

   越是新生存的数据越是有可能被清除  常用数据类型会根据使用频率
分成三个阶段  根据阀值 由小到大 出的频率则是相反

查看计数  import sys

sys.getrefcount(p)(表现当前的计数，本身sys的函数调用也让目标对象计数+1)

4手工操作
import gc
gc.set_debug(flags)：设置gc的debug日志 ，一般为gc.DEBUG_LEAK
gc.collect(generation)(根据分代 0 1 2)
gc.set_threshold() :设置执行垃圾回收机制的频率
gc.get_count():获取程序对象引用的计数器
gc.get_threshold():获取程序自动执行gc的引用计数阀值

注意事项
项目代码尽量避免循环使用
引入gc模块，启用gc模块自动清理循环引用对象的机制
将需要长期使用的对象几张管理，减少gc资源消耗
gc模块处理不了重写__del__方法导致的循环引用，如果一定要添加该方法
则需要显示调用gc模块的garbage中对象的__del__方法进行处理



